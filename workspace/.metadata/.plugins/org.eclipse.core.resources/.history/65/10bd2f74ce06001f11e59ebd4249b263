package chap14.sec09.exam02;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class CallableSubmitExample {

    public static void main(String[] args) {
        // 스레드 풀 생성(최대 5개의 스레드 운영)
        ExecutorService executorService = Executors.newFixedThreadPool(5);

        // 계산 작업 생성 및 처리 요청
        for (int i = 0; i <= 100; i++) {
            final int idx = i;
            Future<Integer> future = executorService.submit(new Callable<Integer>() {
                @Override
                public Integer call() throws Exception {
                    int sum = 0;
                    for (int j = 1; j <= idx; j++) {
                        sum += j;
                    }
                    Thread thread = Thread.currentThread();
                    System.out.println("[" + thread.getName() + "] sum of " + idx + " is " + sum);
                    return sum; // Callable은 결과를 반환해야 합니다.
                }
            });
        }

        // 작업이 모두 완료될 때까지 대기
        executorService.shutdown();
    }
}
